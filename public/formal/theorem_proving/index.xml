<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>定理证明 on EasyFormal</title>
    <link>//localhost:1313/formal/theorem_proving/</link>
    <description>Recent content in 定理证明 on EasyFormal</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <copyright>The MIT License (MIT) Copyright © 2023 Jordan GAZEAU</copyright>
    <atom:link href="//localhost:1313/formal/theorem_proving/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一文了解定理证明器 ACL2</title>
      <link>//localhost:1313/formal/theorem_proving/acl2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/formal/theorem_proving/acl2/</guid>
      <description>ACL2 源码：https://github.com/acl2/acl2 ACL2 用户手册：https://www.cs.utexas.edu/users/moore/acl2/manuals/current/manual/index.html 简介# ACL2 是一个交互式定理证明器，基于 Common Lisp 编程语言，结合了 Formal 模型和用于证明这些模型属性的定理证明器。&#xA;证明器：用户给它一个公式，它会为用户提供该公式的证明或告诉用户没有证明。&#xA;交互式：ACL2 定理证明器可以自动查找证明。但大多数情况下，用户必须提供帮助（引导 ACL2 首先证明关键引理 Lemma）。&#xA;Common Lisp 是标准列表处理编程语言，ACL2 是其的一个子集。&#xA;Formal 模型：ACL2 用于构建计算机硬件和软件的数学模型。&#xA;工业应用# ACL2 被广泛用于学术界和工业界，它被用于验证微处理器、微码、Sun Java 虚拟机、操作系统内核、其他验证器和有趣算法模型的特性，如 AMD 使用 ACL2 验证了 AMD Athlon™ 的基本浮点运算符与 IEEE 754 规范的兼容性；IBM 使用 ACL2 对 IBM Power 4 上的浮点除法和平方根进行了验证。&#xA;ACL2 系统架构# 用户通过给出定义、定理和建议来与定理证明器进行交互。&#xA;可以将其他事件的某些经过认证的文件中的所有规则包含在数据库中。此类经过认证的文件称为 books。数据库包含 ACL2“知道”的所有规则。&#xA;证明通常建立在许多 books 的基础上，其中一些是专门针对该问题领域编写的，另一些则涉及常用领域，例如算术或列表处理。 ACL2 的发行版包括许多用户编写的 books。&#xA;定理证明器# 当你给定理证明者一个要证明的目标公式时，它会尝试通过将其分解为子目标来证明它，每个子目标都必须被证明才能证明原始目标。这种目标的分解是通过 ACL2 中内置的各种证明技术来完成的。不同的证明技术以不同的方式分解公式。&#xA;定理证明者的行为受到公理、定义和先前证明的定理的规则数据库的影响。&#xA;大多数时候，用户只需通过确定要证明的 Lemma 来指导定理证明。（Lemma 只是用户认为在其他定理的证明中有用的定理。）&#xA;ACL2 使用流程# 你向 ACL2 提出待证的猜想 通常情况下，它无法证明（或你终止了它的尝试），但它会输出一些关键检查点 你查看了关键检查点，并确定一个已知的有帮助的事实 将你的知识形式化为公式，并说明 ACL2 应如何将公式转化为规则； 递归地应用上述步骤，让 ACL2 来证明你的公式并将其存储为你指定的规则类型 ACL2 工作原理# ACL2 使用六种内置证明技术来将目标公式分解为子目标。</description>
    </item>
    <item>
      <title>使用 ACL2 进行硬件验证</title>
      <link>//localhost:1313/formal/theorem_proving/acl2_hardware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/formal/theorem_proving/acl2_hardware/</guid>
      <description>1. Vl# VL Verilog 工具包是一个大型 ACL2 库，用于处理SystemVerilog外部链接（以及 常规 Verilog外部链接）源代码，它作为许多 Verilog 工具的前端。它包含以下部分：&#xA;Verilog 语法的内部表示（Vl-design、Vl-module、Vl-port、Vl-always 等） 用于将 Verilog 源代码解析为这种表示形式的加载器 可以简化这些设计的各种变换（Annotate、Elaborate等过程） 打印和其他报告生成功能 2. Sv# SV 是一个硬件验证库，具有基于向量的 表达式表示（svex）、与 gl 集成的高效符号模拟并支持许多 SystemVerilog 功能。它通常作为vl的后端。&#xA;SV 的核心是基于一种符号表达式语言，该语言表示四值“bits”无限宽度向量 </description>
    </item>
  </channel>
</rss>
