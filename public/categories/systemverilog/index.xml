<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SystemVerilog on EasyFormal</title>
    <link>/categories/systemverilog/</link>
    <description>Recent content in SystemVerilog on EasyFormal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>The MIT License (MIT) Copyright © 2023 Jordan GAZEAU</copyright>
    <atom:link href="/categories/systemverilog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数据类型</title>
      <link>/digital/systemverilog/01.data-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/digital/systemverilog/01.data-types/</guid>
      <description>在Verilog中，所有数据类型都是 4 值的，即可以表示 0、1、X 和 Z。但是，在 test benches 的中，不需要这些4态变量。例如，要计算数据包的数量，我们需要一个 2 值变量。因此，System Verilog 引入了一类新的 2 值变量，即 0 和 1。&#xA;数据类型列表# sr. no. data type 1. 4-state 2. 2-state 3. Arrays 4. Strings 5. Structures and Union 6. Enumerated 7. User defined Tabular column.1. data types 有符号和无符号数字&#xA;无符号数：无符号数的符号不使用任何标志，即无符号数只能存储正数。&#xA;无符号二进制数的范围从 0 到 ((2^n) - 1)，n 表示位数。&#xA;有符号数：通过有符号数中的符号标志来区分正值和负值。有符号位的零有两种可能表示形式（正 (0) 和负 (1)）。&#xA;有符号二进制数的范围从 -2^(n-1) 到 2^(n-1)-1，n表示位数。&#xA;有符号二进制数在计算机系统中，一般用补码来表示：&#xA;有符号二进制数的补码：&#xA;正数的补码：与原码相同。 例如，+9的补码是00001001。 负数的补码：符号位为1，其余位为该数绝对值的原码按位取反；然后整个数加1。 例如，-7的补码：因为是负数，则符号位为“1”,整个为10000111；其余7位为-7的绝对值+7的原码 0000111按位取反为1111000；再加1，所以-7的补码是11111001。 已知一个数的补码，求原码：&#xA;如果补码的符号位为“0”，表示是一个正数，所以补码就是该数的原码。 如果补码的符号位为“1”，表示是一个负数，求原码的操作可以是：符号位为1，其余各位取反，然后再整个数加1 有符号数和无符号数的示例</description>
    </item>
    <item>
      <title>数组</title>
      <link>/digital/systemverilog/02.array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/digital/systemverilog/02.array/</guid>
      <description>数组是元素的集合，所有元素都具有相同的类型，并使用其名称和一个或多个索引进行访问。 Verilog 2001 要求数组的下限和上限必须是数组声明的一部分。 System Verilog 引入了紧凑数组声明样式，只需给出数组大小以及数组名称声明就足够了。&#xA;下图显示了 System Verilog 中使用的不同类型的数组。 数组类型一览表列表：&#xA;数组类型 描述 压缩数组(Packed Array) 先声明数组名称，后声明数组维度 非压缩数组(Unpacked Array) 先声明数组维度，后声明数组名称 动态数组(Dynamic Array) 内存将在运行时分配 关联数组(Associative Array) 仅在使用时分配内存并且使用任何索引类型对数组进行索引 队列(Queue) 它类似于 fifo，我们可以在运行时向队列添加和删除元素 数组的函数 它由数组定位函数、数组排序函数和数组缩减函数组成 静态数组# 在固定大小数组/静态数组中，数组大小在整个模拟过程中将保持不变，一旦声明数组就无需创建它。默认情况下，数组将初始化为值“0”。在这种类型的数组中，内存将在编译阶段被占用，并且我们无法在运行时重新分配内存。&#xA;静态数组有两种类型&#xA;压缩数组 非压缩数组. 压缩数组# 压缩数组（Packed Arrays）是一种在数组名称之前声明数组维度的数组。在此数组中的多个位存储在一个内存位置中。&#xA;注意： 它可以由任何单个位数据类型 bit、logic 和 reg 组成。我们不能对压缩数组使用多位数据类型。&#xA;语法： [data_type] [dimensions] [array_name];&#xA;示例：&#xA;1) bit [3:0]abc = 4&#39;b0110&#xA;2) logic [15:0]pqr = 16&#39;h10fe&#xA;3) reg [7:0]xyz = 8&#39;d16&#xA;一些注意事项：&#xA;如果压缩数组被声明为带符号的，则被视为单个向量的数组应被带符号。数组的各个元素都是无符号的，除非它们是声明为有符号的命名类型。 压缩数组的最大大小可以受到限制，但至少应为 65536 (2^16) 位。 压缩数组是可综合的。 下图展示了二维压缩数组中数组元素的存储方式。对于位 [2:0][3:0]xyz 示例，数组元素从左到右将占用内存。</description>
    </item>
    <item>
      <title>结构体和联合体</title>
      <link>/digital/systemverilog/03.structure-and-union/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/digital/systemverilog/03.structure-and-union/</guid>
      <description>结构体# 结构包含具有不同大小的不同数据类型，这些数据类型分组在一个结构体名称下。默认情况下，结构体最初是未压缩的形式，但我们可以使用“packed”关键字将其转换为压缩结构。结构与普通数组不同，因为数组仅使用相同类型和大小的元素，而结构体使用不同的数据类型。使用“struct”关键字声明的非压缩结构。&#xA;下图显示了 System Verilog 中不同类型的结构体。&#xA;结构体类型&#xA;1.非压缩结构体 2.压缩结构体&#xA;非压缩结构体# 非压缩结构是默认的结构语法，与普通结构体相同。不同的变量在结构内部保存不同的数据，称为结构成员。结构成员被视为自变量。当我们想给结构体的成员赋值时，可以使&amp;rsquo;structure name. variable&amp;rsquo;的方式访问。&#xA;赋值给结构体成员：&#xA;structure name = &amp;lsquo;{value1, value2, value3};&#xA;赋值的替代方法：&#xA;structure name = &amp;lsquo;{variable1 : value1 , variable2 : value2 , variable 3 : value3};&#xA;该方法一步完成初始化。变量和值可以用冒号“.”分隔。&#xA;语法：&#xA;struct{ list of different types of variables with sizes } structure name;&#xA;示例：&#xA;struct{&#xA;string name;&#xA;bit[15:0] salary;&#xA;byte id;&#xA;} employee_s;&#xA;下图显示了非压缩结构的数据对齐情况。&#xA;&amp;lsquo;string&amp;rsquo; 为 sam 占用 24 位，这里 string 被视为 ascii 字符。然后 16 位表示位[15:0]，8 位表示字节。这里比特流大小是 48。未压缩的结构比压缩的结构具有更多的内存占用。</description>
    </item>
    <item>
      <title>用户自定义类型</title>
      <link>/digital/systemverilog/04.user-defined/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/digital/systemverilog/04.user-defined/</guid>
      <description>Typedef# Typedef 用于根据较长的数据类型规范创建新的标识符。它类似于alias命令。 Typedef 主要用于 System Verilog 中的复杂测试平台，因为它用代码中的标识符替换了较长的数据类型，如 int(unsigned longint,signed Shortint)、byte、bit[7:0]、logic[7:0]。 Typedef 在类、结构和枚举中使用，使数据类型声明更容易。&#xA;语法：&#xA;typedef &amp;lt;base_type&amp;gt; &amp;lt;size&amp;gt; &amp;lt;type_name&amp;gt;;&#xA;在类中的 Typedef# Typedef 在类中的主要用途是有时我们在声明类本身之前使用类变量。这时候就会导致代码出现一些编译错误。因此，为了避免编译错误，我们可以在类本身的声明之前使用“typedef 类变量”。&#xA;语法：&#xA;typedef class class_name;&#xA;示例&#xA;typedef class fruit2;&#xA;class fruit1; fruit2 f;&#xA;endclass&#xA;class fruit2 fruit1 f;&#xA;endclass&#xA;在结构体中的 Typedef# 如果没有 Typedef，Structure 在大型复杂测试平台中可能会出现一些编译错误。 Typedef 还提供了使声明变得更加容易的功能。&#xA;语法：&#xA;typedef struct {&#xA;datatype name;&#xA;datatype name;&#xA;}structure_name;&#xA;示例&#xA;typedef struct{&#xA;string name;&#xA;byte id;&#xA;longint age;&#xA;} personal_ details_s;&#xA;在枚举中的 Typedef# Typedef 用于当我们需要多个变量共享相同的枚举值时。如果没有 Typedef，我们将得到语法错误。枚举数据类型为所有值创建新变量。</description>
    </item>
    <item>
      <title>运算符</title>
      <link>/digital/systemverilog/05.operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/digital/systemverilog/05.operators/</guid>
      <description>运算符是代表特定数学或逻辑动作或过程的字符。&#xA;s.No. Operator 1. 算术运算符 2. 关系运算符 3. 相等运算符 4. 逻辑运算符 5. 按位运算符 6. 移位运算符 7. 条件运算符 8. 约简运算符 9. 连接和复制运算符 1. 算术运算符# 我们使用算术运算符对变量执行基本数学函数。这些运算符应该已经很熟悉，因为它们大多是常见数学符号的复制。&#xA;下表显示了 SystemVerilog 中算术运算符的完整列表。 2. 关系运算符# 关系运算符一览表&#xA;运算符 描述 a &amp;lt; b a 小于 b a &amp;gt; b a 大于 b a &amp;lt;= b a 小于 或等于 b a &amp;gt;= b a 大于 或等于 b 这些运算符比较操作数并产生 1 位标量布尔值。&#xA;0：如果关系为 false 1：如果关系为 true x：如果任何操作数具有未知的 x 位 3. 相等运算符# 相等运算符用于比较表达式。如果比较失败，则结果为 0，否则为 1。 等式运算符有两种类型。</description>
    </item>
    <item>
      <title>控制流</title>
      <link>/digital/systemverilog/06.control-flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/digital/systemverilog/06.control-flow/</guid>
      <description>条件语句# 条件语句用于检查块中的语句是否被执行。条件语句创建语句块。如果给出的表达式是 true，执行块中的语句集，如果表达式为 false，则 else 块语句将最后执行。&#xA;条件语句一览表&#xA;S.No Conditional Statement 1. if 2. if-else 3. if-else ladder 4. unique if 5. unique0 if 6. priority if 不同条件表达式之间的差异# 条件 if elseif unique if unique0 if priority if 只有一个条件表达式为真 执行 true 条件块内的语句集 执行 true 条件块内的语句集 执行 true 条件块内的语句集 执行 true 条件块内的语句集 多个条件表达式为真 执行第一个 true 条件块语句，不显示警告 执行第一个为真的条件块语句，显示警告 执行第一个为真的条件块语句，显示警告 执行第一个 true 条件块语句，不显示警告 没有 else，条件表达式都不为真 不执行 true 条件块内的语句, 不显示警告 不执行 true 条件块内的语句, 显示警告 不执行 true 条件块内的语句, 不显示警告 不执行 true 条件块内的语句, 显示警告 警告的目的# unique if、unique0 if 和priority if 是 SystemVerilog 中 if-else 条件语句的更新版本。这些条件语句显示警告，有助于检测死代码或未使用的条件语句。</description>
    </item>
    <item>
      <title>函数</title>
      <link>/digital/systemverilog/07.functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/digital/systemverilog/07.functions/</guid>
      <description>函数的主要用途是编写一段可以随时调用n次的代码，只需调用函数名即可，不需要任何模拟时间来执行。&#xA;函数是返回类型，仅返回函数声明中提到的单个值，如果未声明则返回一个位的值。&#xA;语法：&#xA;initial begin function_name(arguments); end function &amp;lt;return_type(optional)&amp;gt; function_name(arguments);` statement1; statement2; . . statementN; endfunction 限制：&#xA;函数内部的代码中不允许有#、@、wait等耗时语句 只能返回一个值 无法从函数中调用任务，因为任务允许有耗时的语句 调用函数有很多变体：&#xA;调用以值作为参数的函数 调用以变量作为参数的函数 使用表达式中的值调用函数 C使用带位置参数的变量调用函数 调用自动函数 通过变量的引用调用带有变量的函数 调用返回类型为 void 的函数 通过传递数组来调用函数 调用具有默认值的变量的函数 从函数调用任务（使用 fork 和 join_none 的例外情况） 调用以值作为参数的函数# 示例：&#xA;int result; initial begin result=sum(5,6); $display(&amp;#34;\treturned from function and&amp;#34;); $display(&amp;#34;\tstored the value of sum in result&amp;#34;); $display(&amp;#34;\n\t@ %0t ns, value of sum is %0d&amp;#34;,$time,result); end function int sum(int var1,var2); $display(&amp;#34;entered into function&amp;#34;); return var1+var2; endfunction 在上面的示例中，函数名称是 sum，其返回类型为 int，即它仅返回一个 int 值。</description>
    </item>
    <item>
      <title>任务</title>
      <link>/digital/systemverilog/08.tasks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/digital/systemverilog/08.tasks/</guid>
      <description>任务（task）几乎与函数类似，但任务可以计算多个变量并使用输出或 inout 语句返回它们，但不像函数那样必需，即任务不是返回类型，并且任务能够具有诸如 #、@、等待。任务也可以调用另一个任务和函数。&#xA;语法：&#xA;task_name(arguments); task task_name(arguments); statement1; statement2; . . statementN; endtask 限制：&#xA;任务不可综合 流程图&#xA;automatic task# 每当声明为 automatic task 时，每次调用该任务时，模拟器都会分配新的内存。一般来说，任务在模块内部是静态的，要使其自动执行，需要添加 automatic 关键字，如下所示。&#xA;语法：&#xA;task automatic task_name() 示例：&#xA;task automatic factorial_automatic(int var1); #1; if(var1&amp;gt;=2) begin factorial_automatic(var1-1); result=result*var1; end else begin result=1; -&amp;gt;a; end endtask initial begin fork factorial_static(5); factorial_automatic(5); join fork wait(a.triggered); $display(&amp;#34;@ %0t ns , factorial_automatic:%0d&amp;#34;,$time,result); end 流程图：&#xA;从任务中调用函数# 示例：&#xA;initial begin $display(&amp;#34;\t ----output for func from task----&amp;#34;); $display(&amp;#34;\t@ %0t ns, In the initial block&amp;#34;,$time); $display(&amp;#34;\tcalling task&amp;#34;); task_sum; $display(&amp;#34;\treturned to initial from function&amp;#34;); end task task_sum; #1 $display( &amp;#34;\t@ %0t ns , I&amp;#39;m in task&amp;#34;,$time); $display(&amp;#34;\tcalling func inside a task&amp;#34;); #1 void&amp;#39;(function_sum); $display(&amp;#34;\treturned to task from function&amp;#34;); endtask function function_sum; $display( &amp;#34;\t@ %0t ns I&amp;#39;m in function&amp;#34;,$time); endfunction 从函数中调用任务是非法的，但从任务中调用 func 是正常的，因为函数没有任何耗时的语句。</description>
    </item>
    <item>
      <title>SystemVerilog 循环</title>
      <link>/digital/systemverilog/09.loops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/digital/systemverilog/09.loops/</guid>
      <description>循环只不过是将需要多次运行的语句包含在循环中，而不是重复编写这些语句。循环将根据条件语句运行多次，如果条件始终为真，则它会变成无限循环，系统将挂起。&#xA;循环一览表# S.No. 循环变量 解释 1. while 根据条件重复语句集 2. do_while 先运行语句而不检查条件，行为就像 while 3. repeat 仅重复语句特定次数 4. for_loop 与 while 类似，但比 while 更紧凑 5. foreach 仅用于遍历数组的每个元素 6. forever 在整个模拟过程中重复这些语句 1. while# 在 while 循环中，首先我们需要检查条件，然后才能执行语句。我们需要在执行之前初始化条件中的变量。&#xA;while 循环首先检查条件是否为真，如果为真则执行语句。如果条件为假，循环就在那里结束。&#xA;语法 -&#xA;while(condition)begin Statements; end 流程图：&#xA;2. do-while# 在do-while循环中，首先执行一次条件，然后检查条件是否成立。如果条件为真，则执行该组语句，直到条件为假为止。如果条件为假，循环就在那里结束。&#xA;语法 -&#xA;do begin Statements; end while(condition)begin Statements; end 流程图：&#xA;3.repeat# 该循环用于将语句或操作重复固定给定的次数。&#xA;语法 -&#xA;repeat(no. of times)begin statements; end 示例： -&#xA;下面的示例显示了重复循环的工作原理。这里，重复循环内有三个语句。重复4次。&#xA;代码快照&#xA;module repeat_code; initial begin ; repeat(4)begin // Repeat the statements inside 4 times $display (&amp;#34;Good morning&amp;#34;); $display (&amp;#34;Keep shining&amp;#34;); $display (&amp;#34;--------------&amp;#34;); end end 流程图：</description>
    </item>
    <item>
      <title>Scheduler schematic</title>
      <link>/digital/systemverilog/10.scheduler-schematics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/digital/systemverilog/10.scheduler-schematics/</guid>
      <description>Scheduler schematic# The scheduling schematics are used to describe the element&amp;rsquo;s behavior and their interaction with each other. This interaction is described for event execution and its scheduling. It is important to note that Verilog and System Verilog is like a parallel programming language in terms of blocks or process executions.&#xA;Before going to the regions we have to know about simulation time and time slot.&#xA;The term simulation time is used to refer to the time value maintained by the simulator to model the actual time it would take for the system description being simulated.</description>
    </item>
    <item>
      <title>Processes</title>
      <link>/digital/systemverilog/11.processes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/digital/systemverilog/11.processes/</guid>
      <description>Processes# A Processes or Thread is any piece of code that gets executed as a separate entity. A fork-join block creates the different threads that run in parallel.&#xA;In the below Fig-1 we can see that types of processes and the process controls.&#xA;Fig-1: The processes and process control blocks. Cheat sheet for processes:# S.no Processes Description 1. fork-join Parent threads will be executed only when all child threads are executed.</description>
    </item>
    <item>
      <title>Fine Grain Process Control</title>
      <link>/digital/systemverilog/12.fine-grain-process-control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/digital/systemverilog/12.fine-grain-process-control/</guid>
      <description>Fine Grain Process Control# Systemverilog has a built in class named Process that allows one process(i.e, like fork_join) to access and control the processes/threads. When we fork off any thread, a new object of process class is created at that time. This object contains status information about that thread.&#xA;Fig-1: These are all the pre-defined methods which are available in fine grain process control. Cheat sheet of different fine-grain process control:# S.</description>
    </item>
    <item>
      <title>Interface</title>
      <link>/digital/systemverilog/13.interface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/digital/systemverilog/13.interface/</guid>
      <description>In Verilog, the communication between blocks is specified using module ports.&#xA;Disadvantage of verilog module connections&#xA;Declaration must be duplicated in multiple modules. Risk of mismatched declaration. A change in design specifications can require modifications in multiple modules. Interface# SystemVerilog adds the interface construct which encapsulates the communication between blocks. An interface is a bundle of signals or nets through which a testbench communicates with a design.&#xA;sl. no. data type 1.</description>
    </item>
    <item>
      <title>Constraint</title>
      <link>/digital/systemverilog/14.constraint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/digital/systemverilog/14.constraint/</guid>
      <description>Constraint# The constraint is the way to assign legal value to the random variables. Constraints help us to limit the randomness of the variable by specifying the range. The way to create valid test configurations is by the use of constraints.&#xA;To enable the randomization we use rand() and randc() function. For using the constraint first, we need to assign the random variables by using the keyword rand or randc. After that declare the constraint statement.</description>
    </item>
    <item>
      <title>类和面向对象</title>
      <link>/digital/systemverilog/15.classes-and-oops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/digital/systemverilog/15.classes-and-oops/</guid>
      <description>Class# Class is user define data type. Classes contains a set of &amp;ldquo;properties&amp;rdquo; and &amp;ldquo;methods&amp;rdquo; in it. Both properties and methods are treated as Members of the class.&#xA;generally,&#xA;Class Properties are the variables inside a class and Class Methods are the Functions/Tasks inside a class.&#xA;Class declaration does not occupy any memory. we can define a class in systemverilog inside a module or outside of a module. Fig-1: All variations of a class.</description>
    </item>
    <item>
      <title>Coverage</title>
      <link>/digital/systemverilog/17.functional-coverage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/digital/systemverilog/17.functional-coverage/</guid>
      <description>Coverage# Coverage is a generic term for measuring progress to complete design verification. Coverage reports are read in percentage(%).&#xA;Need for coverage&#xA;To help us to understand whether all features of the design are measured and to know whether every line in the code is executed or not.&#xA;Types of coverage&#xA;Code Coverage Functional Coverage Code Coverage# Code coverage deals with the implementation part that is, it checks whether your tests exercised the “implementation” of the design specification, but it won’t check the verification plan.</description>
    </item>
    <item>
      <title>Assertion</title>
      <link>/digital/systemverilog/18.assertion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/digital/systemverilog/18.assertion/</guid>
      <description>Assertion# Assertions are primarily used to validate the behavior of a design. An assertion is a check embedded in design or bound to a design unit during the simulation. Warnings or errors are generated on the failure of a specific condition or sequence of events.&#xA;&amp;ldquo;The values of variables used in assertions are sampled in the Preponed region of a time slot, and the assertions are evaluated during the Observed region.</description>
    </item>
    <item>
      <title>Interprocess communication  </title>
      <link>/digital/systemverilog/19.interprocess-communication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/digital/systemverilog/19.interprocess-communication/</guid>
      <description>Interprocess communication# Interprocess communication (IPC) is a set of programming interfaces that allow a programmer to coordinate activities among different program processes that can run concurrently in an operating system. This allows a program to handle many user requests at the same time&#xA;Cheat Sheet# Components/Threads Description Events Different threads synchronize with each other via event handles in a testbench Semaphores Different threads might need to access the same resource; they take turns by using a semaphore Mailbox Threads/Components need to exchange data with each other; data is put in a mailbox and sent 1-Events# Event is used for synchronization between two or more concurrently active processes.</description>
    </item>
    <item>
      <title>Program Block</title>
      <link>/digital/systemverilog/20.misc-constructs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/digital/systemverilog/20.misc-constructs/</guid>
      <description>1.Program Block# The module is the basic building block in Verilog which works well for Design. However, for the testbench, a lot of effort is spent getting the environment properly initialized and synchronized, avoiding races between the design and the testbench, automating the generation of input stimuli, and reusing existing models and other infrastructure. System Verilog adds a new type of block called program block. It is declared using the program and endprogram keywords.</description>
    </item>
    <item>
      <title>Choosing-an-array</title>
      <link>/digital/systemverilog/choosing-an-array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/digital/systemverilog/choosing-an-array/</guid>
      <description>Fixed Arrays/Static Arrays:# 1) Fixed Arrays Over All Arrays:&#xA;Fixed Arrays execute faster than all other types of arrays (i.e Associative arrays, dynamic arrays, queues) because it will store in uninitialized data segment (bss segment) of memory, so it will consume less simulation time to execute. And the heap is the segment where dynamic, associative and queue memory allocation takes place.&#xA;The below figure shows the memory layout. Figure.1. Memory Layout Size is known previously then we can choose fixed arrays over all other types of arrays.</description>
    </item>
    <item>
      <title>Control-Flow-Interview-questions</title>
      <link>/digital/systemverilog/control-flow-interview-questions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/digital/systemverilog/control-flow-interview-questions/</guid>
      <description>1. How to call the task inside a function? giving example with code.&#xA;Answer: Normally a function can be called inside the task. but calling the task inside the function is illegal because task has delay elements and the function does not have any delay elements but there is an exceptional case for it, by using the fork and join_none inside the function to call the task is possible.&#xA;Please refer to the below code for a better understanding.</description>
    </item>
    <item>
      <title>Data-type-Interview-questions</title>
      <link>/digital/systemverilog/data-type-interview-questions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/digital/systemverilog/data-type-interview-questions/</guid>
      <description>1.Is there any difference between reg and logic in SystemVerilog?&#xA;Answer:&#xA;Before system verilog ,verilog is mainly used for synthesis and verification purposes. In verilog there are two main data type&#xA;reg&#xA;2)net&#xA;Reg is mainly used when we want to store values in the variable .It is mainly used inside procedural block .mainly it is used for designing of sequential circuit .net variable are mainly continuously driven .In net type variable it is not possible to store value .</description>
    </item>
    <item>
      <title>Differences-between-macros-and-parameters</title>
      <link>/digital/systemverilog/differences-between-macros-and-parameters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/digital/systemverilog/differences-between-macros-and-parameters/</guid>
      <description>Macros Parameters macros are replaceable parameters are like variables macros works in pre-compilation state parameters works in Elaboration state syntax : `define macro_name value syntax : parameter parameter_name=value We can use `define in any file we can use parameter within the file we can&amp;rsquo;t give datatypes in macros we can use and change datatype in parameters Macros can have multiple lines multiple lines cannot be possible here because parameter is just like declaring variables We can give value for a macro in command line parameters value can&amp;rsquo;t be changed in command line Execution stage of macros and parameters# Parameters used in macros# parameter data = 5; // data will be replaced by value 5 in Elaboration `define DATA data // in pre-compilation `DATA will be replaced with data module tb(); int a,b; initial begin $display(&amp;#34;DATA=%0d&amp;#34;,`DATA); b= `DATA + 2; $display(&amp;#34; b=%0d&amp;#34;,b); end endmodule In the above code the parameter value of data =5 is used in the macro `DATA</description>
    </item>
    <item>
      <title>Interface-Interview-Questions</title>
      <link>/digital/systemverilog/interface-interview-questions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/digital/systemverilog/interface-interview-questions/</guid>
      <description>1. How does the clocking block handles synchronous reset?&#xA;Solution:&#xA;Synchronous reset is sampled only with respect to clock event. When reset is enabled, it will be effective only after next active clock edge.&#xA;clockingblock TB_CB @(posedge clk) default input #1step output #0; input rst; output a,b; input y; Note: The clocking block is only designed to handle synchronous reset - it should happen only be based on clock event. Reset in clocking block should be handled elsewhere.</description>
    </item>
    <item>
      <title>Processes-InterviewQuestions</title>
      <link>/digital/systemverilog/processes-interviewquestions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/digital/systemverilog/processes-interviewquestions/</guid>
      <description>1.Difference between fork_join,fork_join_any and fork_join_none ?&#xA;fork_join fork_join_any fok_join_none In fork_join the main(parent) threads will execute after all the threads(child threads) in the fork_join is executed In fork_join_any the main(parent) threads executes if any one of the child threads excecutes In fork_join_none child threads and main(parent) threads are executed parallely 2.Can we use wait_fork in fork_join ?&#xA;We know that in fork_join the main thread is executed only when all the threads in fork_join is executed so here no need of using wait_fork.</description>
    </item>
  </channel>
</rss>
